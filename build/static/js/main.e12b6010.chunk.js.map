{"version":3,"sources":["user-list/User-list.tsx","helpers/constants.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["UserList","props","handleClose","setState","show","state","members","activity_periods","this","getuserDetails","axios","get","then","res","data","catch","err","console","log","periods","map","user","key","id","onClick","showUserDetail","real_name","tz","udetails","index","start_time","end_time","Container","Row","Col","Table","striped","bordered","hover","size","showUser","Modal","onHide","Header","closeButton","Title","Body","showuserDetails","Footer","Button","variant","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qVAaqBA,E,kDACjB,WAAYC,GAAY,IAAD,8BACnB,cAAMA,IAiDVC,YAAc,WAAQ,EAAKC,SAAS,CAAEC,MAAM,KAhDxC,EAAKC,MAAQ,CACTC,QAAS,GACTF,MAAM,EACNG,iBAAkB,IALH,E,gEAUnBC,KAAKC,mB,uCAGS,IAAD,OACbC,IAAMC,IC5BO,oBD6BRC,MAAK,SAACC,GACH,EAAKV,SAAS,CAAEG,QAASO,EAAIC,KAAKR,aAErCS,OAAM,SAACC,GACJC,QAAQC,IAAI,QAASF,Q,qCAIlBG,GACXX,KAAKL,SAAS,CAAEC,MAAM,EAAMG,iBAAkBY,EAAQZ,qB,iCAG9C,IAAD,OACP,OACIC,KAAKH,MAAMC,QAAQc,KAAI,SAACC,GAAD,OACnB,wBAAIC,IAAKD,EAAKE,IACV,4BAAI,0BAAMC,QAAS,kBAAM,EAAKC,eAAeJ,KAAQA,EAAKK,YAC1D,4BAAKL,EAAKM,U,wCAQtB,OACInB,KAAKH,MAAME,iBAAiBa,KAAI,SAACQ,EAAUC,GAAX,OAC5B,wBAAIP,IAAKO,GACL,4BAAKD,EAASE,YACd,4BAAKF,EAASG,gB,+BAS1B,OACI,oCACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MAC/B,+BACI,4BACI,oCACA,2CAGR,+BACK/B,KAAKgC,aAGd,kBAACC,EAAA,EAAD,CAAOrC,KAAMI,KAAKH,MAAMD,KAAMsC,OAAQlC,KAAKN,aACvC,kBAACuC,EAAA,EAAME,OAAP,CAAcC,aAAW,GACrB,kBAACH,EAAA,EAAMI,MAAP,uBAEJ,kBAACJ,EAAA,EAAMK,KAAP,KACI,kBAACX,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MAC/B,+BACI,4BACI,0CACA,0CAGR,+BACK/B,KAAKuC,qBAIlB,kBAACN,EAAA,EAAMO,OAAP,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAY1B,QAAShB,KAAKN,aAA1C,mB,GAxFEiD,a,MEevBC,MAtBf,WACE,OACE,yBAAKC,UAAU,OAeb,kBAAC,EAAD,QCXcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdrD,OAAM,SAAAsD,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.e12b6010.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\n// import { any } from \"prop-types\";\r\nimport { USERLIST } from \"../helpers/constants\";\r\nimport { Userlist, Activity_objects } from \"./model/user.model\";\r\n// import UserDetails from \"../user-details/User-details\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\nexport default class UserList extends Component<{}, Userlist> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            members: [],\r\n            show: false,\r\n            activity_periods: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getuserDetails();\r\n    }\r\n\r\n    getuserDetails() {\r\n        axios.get(USERLIST)\r\n            .then((res) => {\r\n                this.setState({ members: res.data.members })\r\n            })\r\n            .catch((err) => {\r\n                console.log('Error', err)\r\n            })\r\n    }\r\n\r\n    showUserDetail(periods: Activity_objects) {\r\n        this.setState({ show: true, activity_periods: periods.activity_periods });\r\n    }\r\n\r\n    showUser() {\r\n        return (\r\n            this.state.members.map((user) =>\r\n                <tr key={user.id}>\r\n                    <td><span onClick={() => this.showUserDetail(user)}>{user.real_name}</span></td>\r\n                    <td>{user.tz}</td>\r\n                </tr>\r\n            )\r\n\r\n        )\r\n    }\r\n\r\n    showuserDetails() {\r\n        return (\r\n            this.state.activity_periods.map((udetails, index) =>\r\n                <tr key={index}>\r\n                    <td>{udetails.start_time}</td>\r\n                    <td>{udetails.end_time}</td>\r\n                </tr>\r\n            )\r\n        )\r\n    }\r\n\r\n    handleClose = () => { this.setState({ show: false }) }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <Table striped bordered hover size=\"sm\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Time Zone</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {this.showUser()}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Modal show={this.state.show} onHide={this.handleClose}>\r\n                                <Modal.Header closeButton>\r\n                                    <Modal.Title>Modal heading</Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    <Table striped bordered hover size=\"sm\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>Start Time</th>\r\n                                                <th>End Time</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {this.showuserDetails()}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button variant=\"secondary\" onClick={this.handleClose}>Close</Button>\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        )\r\n    }\r\n}","export const USERLIST = `assets/user.json`;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport UserList from './user-list/User-list';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <UserList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}